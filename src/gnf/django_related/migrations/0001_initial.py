# Generated by Django 4.1.2 on 2022-10-31 16:51

from django.db import migrations
from django.db import models

import gnf.django_related.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BaseGNodeDb",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "g_node_id",
                    models.CharField(
                        blank=True,
                        default=gnf.django_related.models.rand_guid,
                        max_length=210,
                        null=True,
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "prev_alias",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "status_value",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PermanentlyDeactivated", "PermanentlyDeactivated"),
                            ("Pending", "Pending"),
                            ("Active", "Active"),
                            ("Suspended", "Suspended"),
                        ],
                        max_length=210,
                        null=True,
                    ),
                ),
                (
                    "role_value",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Other", "Other"),
                            ("TerminalAsset", "TerminalAsset"),
                            ("AtomicMeteringNode", "AtomicMeteringNode"),
                            ("AtomicTNode", "AtomicTNode"),
                            ("MarketMaker", "MarketMaker"),
                            ("ConductorTopologyNode", "ConductorTopologyNode"),
                            ("InterconnectionComponent", "InterconnectionComponent"),
                        ],
                        max_length=210,
                        null=True,
                    ),
                ),
                (
                    "g_node_registry_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "gps_point_id",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "ownership_deed_nft_id",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "ownership_deed_validator_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "owner_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "daemon_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "trading_rights_nft_id",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
            ],
            options={
                "db_table": "base_g_node",
            },
        ),
        migrations.CreateModel(
            name="BaseGNodeHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time_s",
                    models.IntegerField(default=gnf.django_related.models.now_unix_s),
                ),
                (
                    "g_node_id",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "prev_alias",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "status_value",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PermanentlyDeactivated", "PermanentlyDeactivated"),
                            ("Pending", "Pending"),
                            ("Active", "Active"),
                            ("Suspended", "Suspended"),
                        ],
                        max_length=210,
                        null=True,
                    ),
                ),
                (
                    "role_value",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Other", "Other"),
                            ("TerminalAsset", "TerminalAsset"),
                            ("AtomicMeteringNode", "AtomicMeteringNode"),
                            ("AtomicTNode", "AtomicTNode"),
                            ("MarketMaker", "MarketMaker"),
                            ("ConductorTopologyNode", "ConductorTopologyNode"),
                            ("InterconnectionComponent", "InterconnectionComponent"),
                        ],
                        max_length=210,
                        null=True,
                    ),
                ),
                (
                    "g_node_registry_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "gps_point_id",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "ownership_deed_nft_id",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "ownership_deed_validator_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "owner_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "daemon_addr",
                    models.CharField(
                        blank=True, default=None, max_length=210, null=True
                    ),
                ),
                (
                    "trading_rights_nft_id",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
            ],
            options={
                "db_table": "base_g_node_history",
            },
        ),
        migrations.CreateModel(
            name="GpsPointDb",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gps_point_id",
                    models.CharField(
                        default=gnf.django_related.models.rand_guid, max_length=210
                    ),
                ),
                ("lat", models.DecimalField(decimal_places=6, max_digits=9)),
                ("lon", models.DecimalField(decimal_places=6, max_digits=9)),
            ],
            options={
                "db_table": "gps_point",
            },
        ),
    ]
